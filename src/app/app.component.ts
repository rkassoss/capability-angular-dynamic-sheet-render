import { Component, ElementRef, ViewChild } from '@angular/core';
import { QsConfig } from './qsConfig';
import { EmbededSheetService } from './embedded-sheet.service';
import { EmbededByObjectService } from './embedded-by-object.service';
declare var window: any

@Component({
  selector: 'app-root',
  templateUrl: './app.component.html',
  styleUrls: ['../styles.scss']
})

export class AppComponent {
  @ViewChild('vis') vis: ElementRef;
  @ViewChild('filter') filter: ElementRef;
  @ViewChild('sheet') sheet: ElementRef;

  page = 0;
  title1 = 'First Menu Tab';
  title2 = 'Second Menu Tab';
  selectedReportTitle: string;
  firstTabConfig = QsConfig.FirstTab;
  secondTabConfig = QsConfig.SecondTab;
  isFirstTabActive = true;

  private app: any;

  constructor(private embededSheetService: EmbededSheetService, 
              private embededByObjectService: EmbededByObjectService) {}

  ngOnInit() {
    this.selectedReportTitle = this.title1;
    this.initialise();
  }

  initialise() {
    return new Promise(async (resolve, reject) => {
      await this.getViewsUsingCapabilityApi();
    });
  }
  

  async injectScript(src, properties = {}) {
    const script = document.createElement("script");
    script.src = src;
  
    Object.keys(properties).forEach((key) => {
      script.setAttribute(key, properties[key]);
    });
  
    document.head.appendChild(script);
    return new Promise<void>((resolve) => {
      script.onload = () => resolve();
    });
  }


  async injectStyle(href) {
    const stylesheet = document.createElement("link");
    stylesheet.href = href;
    stylesheet.type = "text/css";
    stylesheet.rel = "stylesheet";
    document.head.appendChild(stylesheet);
    return new Promise<void>((resolve) => {
      stylesheet.onload = () => resolve();
    });
  }
  

  async getViewsUsingCapabilityApi() {
    var config = {
      host: 'https://kassovitz.us.qlikcloud.com',
      prefix: '/',
      port: 443,
      isSecure: true,
      clientId: '376705f95dd71857e2290540f0f25f28',
    };

    await this.injectStyle(
      `${config.host}/resources/autogenerated/qlik-styles.css`
    );
    await this.injectScript(
      `${config.host}/resources/assets/external/requirejs/require.js`
    );

    window.require.config({
      baseUrl: config.host + (config.port ? ":" + config.port : "") + config.prefix + "resources",
      clientId: config.clientId ? config.clientId : null,
    });

    window.require(["js/qlik"], async (qlik: any) => {
      qlik.setOnError((error: any) => {
        throw new Error(error);
      });

      let qsPageConfig = this.isFirstTabActive ? this.firstTabConfig : this.secondTabConfig;

      // open the app
      this.app = qlik.openApp(qsPageConfig.AppId, config);

      if (this.isFirstTabActive) {
        // First Menu Tab: load app sheet into greed
        this.embededSheetService.loadObjects(this.app, this.sheet, this.firstTabConfig);
      } else {
        // Second Menu Tab: insert Qlik objects into the page by object id.
        await this.embededByObjectService.render(this.app, this.vis, this.secondTabConfig.ObjectId);
        await this.embededByObjectService.render(this.app, this.filter, this.secondTabConfig.FilterPane);
      }
    })
  }

  switchView(value: any) {
    let promises = this.isFirstTabActive ?
      Promise.all([
        this.embededSheetService.closeObjects(),
      ]) :
      Promise.all([
        this.embededByObjectService.closeObjectById(),
        this.embededByObjectService.closeObjectById(),
      ])

    promises.then(() => {
      if (value.title1 == this.title1) {
        this.selectedReportTitle = this.title1;
        this.isFirstTabActive = true;
      }
      else if (value.title2 == this.title2) {
        this.selectedReportTitle = this.title2;
        this.isFirstTabActive = false;
      }
      // Close the previous app
      this.terminateApp().then(() => {
        // Initialise the new app from switched tab
        this.initialise();
      });
    })
  }

  terminateApp(): Promise<any> {
    return new Promise(async (resolve, reject) => {
      // https://help.qlik.com/en-US/sense-developer/May2023/Subsystems/APIs/Content/Sense_ClientAPIs/CapabilityAPIs/AppAPI/close-method.htm
      await this.app.close();
      resolve(true)
    });
  }
}
